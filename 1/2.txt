import numpy as np
import matplotlib.pyplot as plt

class EpsilonGreedyAgent:
    def __init__(self, n=3, epsilon=0.1):
        self.n = n
        self.epsilon = epsilon
        self.estimates = np.zeros(n)
        self.counts = np.zeros(n)

    def select_restaurant(self):
        if np.random.rand() < self.epsilon:
            return np.random.randint(self.n)  # Explore
        else:
            return np.argmax(self.estimates)  # Exploit

    def update_estimate(self, choice, reward):
        self.counts[choice] += 1
        n = self.counts[choice]
        reward_binary = 1 if reward == 5 else 0
        self.estimates[choice] += (reward_binary - self.estimates[choice]) / n

def run_interactive(steps=20):
    agent = EpsilonGreedyAgent()
    good_meals_count = np.zeros(agent.n)
    total_meals_count = np.zeros(agent.n)
    good_meal_pct_history = [[] for _ in range(agent.n)]

    print("Welcome! You will rate meals (1 to 5) for all 3 restaurants each step.")

    for step in range(steps):
        choice = agent.select_restaurant()
        print(f"\nStep {step+1}: Agent recommends Restaurant {choice + 1}")

        ratings = []
        for r in range(agent.n):
            while True:
                try:
                    rating = int(input(f"Enter your rating for Restaurant {r+1} meal (1-5): "))
                    if rating < 1 or rating > 5:
                        print("Please enter a number between 1 and 5.")
                        continue
                    break
                except:
                    print("Invalid input. Please enter an integer between 1 and 5.")
            ratings.append(rating)

        # Update estimates only for the recommended restaurant
        agent.update_estimate(choice, ratings[choice])

        # Update meal counts for all restaurants
        for r in range(agent.n):
            total_meals_count[r] += 1
            if ratings[r] == 5:
                good_meals_count[r] += 1

        for r in range(agent.n):
            if total_meals_count[r] > 0:
                pct = good_meals_count[r] / total_meals_count[r]
            else:
                pct = 0
            good_meal_pct_history[r].append(pct)

    # Final results
    print("\n=== Results ===")
    for i in range(agent.n):
        pct = (good_meals_count[i] / total_meals_count[i]) * 100 if total_meals_count[i] > 0 else 0
        print(f"Restaurant {i+1}: {pct:.2f}% good meals (rating=5) from {int(total_meals_count[i])} meals.")

    # Plot
    plt.figure(figsize=(15, 4))
    for i in range(agent.n):
        plt.subplot(1, 3, i+1)
        plt.plot(good_meal_pct_history[i])
        plt.title(f"Restaurant {i+1} Good Meal % Over Time")
        plt.xlabel("Step")
        plt.ylabel("Good Meal %")
        plt.ylim(0, 1)
        plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Print best restaurant
    best_restaurant = np.argmax(good_meals_count / total_meals_count)
    best_pct = (good_meals_count[best_restaurant] / total_meals_count[best_restaurant]) * 100

    print(f"\nüçΩÔ∏è Restaurant {best_restaurant + 1} has the highest good meal percentage: {best_pct:.2f}%")

run_interactive(steps=20)  # You can increase steps4
